{
	"info": {
		"_postman_id": "13438312-9006-4189-b388-3c7f3acdceed",
		"name": "Curso Postman",
		"description": "# üöÄ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## üîñ **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Tests\" tab**\n\nTests help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/b5f280a7-4b09-48ec-857f-0a7ed99d7ef8/U2NyZWVuc2hvdCAyMDIzLTAzLTI3IGF0IDkuNDcuMjggUE0ucG5n\">\n\n## üí™ Pro tips\n\n- Use folders to group related requests and organize the collection.\n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) in \"Tests\" to verify if the API works as expected and execute workflows.\n    \n\n## üí°Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.0.0/collection.json"
	},
	"item": [
		{
			"name": "Valida√ß√£oLogar",
			"item": [
				{
					"name": "Cadastro User Sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9fda127-bcd0-4f4a-9dae-27124c439a03",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"user_id_login\", jsonResponse._id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o mensagem de sucesso\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Cadastro realizado com sucesso\")\r",
									"});\r",
									"\r",
									" pm.test(\"Valida√ß√£o registro de id\", function () {\r",
									"    pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"user_id_login\"));\r",
									" });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "827b0ae8-d424-41d8-bc8b-dd5dda555025",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva Santos\",\r\n  \"email\": \"beltrano@qa25.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}"
						},
						"url": "{{base_url}}"
					},
					"response": []
				},
				{
					"name": "Logar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "94dade54-5080-44d7-b303-ad2a372f4094",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonResponse.authorization);\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"\r",
									"pm.test(\"Valida√ß√£o mensagem de sucesso\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Login realizado com sucesso\")\r",
									"});\r",
									"\r",
									" pm.test(\"Valida√ß√£o registro de id\", function () {\r",
									"    pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"user_id_login\"));\r",
									" });\r",
									"\r",
									"pm.test(\"Valida√ß√£o de token de Autoriza√ß√£o\", function () {\r",
									"    pm.expect(jsonResponse.authorization).to.not.equal(undefined)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "805d7e1e-738b-410a-a4e3-d976641f46b4",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"beltrano@qa25.com.br\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_login}}"
					},
					"response": []
				},
				{
					"name": "FalhaLogar - Erro de usser",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2efd01dd-fcbe-495d-9013-a585635677f5",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonResponse.authorization);\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o de mensagem\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Email e/ou senha inv√°lidos\")\r",
									"});\r",
									"\r",
									"//  pm.test(\"Valida√ß√£o registro de id\", function () {\r",
									"//     pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"user_id_login\"));\r",
									"//  });\r",
									"\r",
									"pm.test(\"Valida√ß√£o de token de Autoriza√ß√£o\", function () {\r",
									"    pm.expect(jsonResponse.authorization).to.equal(undefined)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ae3ea3fd-5073-450b-b7b4-f90bfa994f5f",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"beltrano@casa.com.br\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_login}}"
					},
					"response": []
				},
				{
					"name": "FalhaLogar - Senha incorreta",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e5cb6acb-908d-404f-b4bb-9818cddeff2a",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonResponse.authorization);\r",
									"\r",
									"pm.test(\"Status code is 401\", function () {\r",
									"    pm.response.to.have.status(401);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o de mensagem\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Email e/ou senha inv√°lidos\")\r",
									"});\r",
									"\r",
									"//  pm.test(\"Valida√ß√£o registro de id\", function () {\r",
									"//     pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"user_id_login\"));\r",
									"//  });\r",
									"\r",
									"pm.test(\"Valida√ß√£o de token de Autoriza√ß√£o\", function () {\r",
									"    pm.expect(jsonResponse.authorization).to.equal(undefined)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d2c4a61c-5c84-4290-a7de-ffc8b177108b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"beltrano@qa25.com.br\",\r\n  \"password\": \"teste1\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_login}}"
					},
					"response": []
				},
				{
					"name": "FalharLogar - Email invalido",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51e6b656-92ac-4bbb-88d2-c7bff23724a4",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"token\", jsonResponse.authorization);\r",
									"\r",
									"pm.test(\"Status code is 400\", function () {\r",
									"    pm.response.to.have.status(400);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o de mensagem\", function () {\r",
									"    pm.expect(jsonResponse.email).to.equal(\"email deve ser um email v√°lido\")\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o de token de Autoriza√ß√£o\", function () {\r",
									"    pm.expect(jsonResponse.authorization).to.equal(undefined)\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "a4efc0a6-db2a-4650-89b8-51ad13f6ee24",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"email\": \"beltrano33qa25.com.br\",\r\n  \"password\": \"teste\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_login}}"
					},
					"response": []
				},
				{
					"name": "Consulta User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aea69e7f-c644-4a45-a8fe-f43e3a66194c",
								"exec": [
									"var jsonData = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o nome usu√°rio\", function () {\r",
									"    pm.expect(jsonData.nome).to.equal(\"Fulano da Silva\");\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o id do usu√°rio\", function () {\r",
									"    pm.expect(jsonData._id_login).to.equal(pm.variables.get(\"user_id_login\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o senha do usu√°rio\", function () {\r",
									"    pm.expect(jsonData.password).to.equal(\"teste\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "d9637613-b364-4692-bba7-df521d1f7bd5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id_login}}",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Excluir User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "375ec08e-b471-4db7-992a-790d83c401cb",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Valida√ß√£o exclus√£o de Registro\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Registro exclu√≠do com sucesso\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "87b08f24-7121-4879-b345-a46a4788e7fd",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id_login}}",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			],
			"id": "64b6ecf5-099a-4a74-95ff-20556e63d6fe"
		},
		{
			"name": "Validacoes User",
			"item": [
				{
					"name": "Excluir User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "375ec08e-b471-4db7-992a-790d83c401cb",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Valida√ß√£o exclus√£o de Registro\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Registro exclu√≠do com sucesso\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "9a60ff0b-3a52-459a-9f7e-412a1d66d2e5",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id}}",
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Cadastro User Sucesso",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f9fda127-bcd0-4f4a-9dae-27124c439a03",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"user_id\", jsonResponse._id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o mensagem de sucesso\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Cadastro realizado com sucesso\")\r",
									"});\r",
									"\r",
									" pm.test(\"Valida√ß√£o registro de id\", function () {\r",
									"    pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"user_id\"));\r",
									" });\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "577a8cb6-9eb4-4d76-96bc-689e5ec2956b",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "accept",
								"value": "application/json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Fulano da Silva\",\r\n  \"email\": \"beltrano@qa15.com.br\",\r\n  \"password\": \"teste\",\r\n  \"administrador\": \"true\"\r\n}"
						},
						"url": "{{base_url}}"
					},
					"response": []
				},
				{
					"name": "Consulta User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aea69e7f-c644-4a45-a8fe-f43e3a66194c",
								"exec": [
									"var jsonData = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o nome usu√°rio\", function () {\r",
									"    pm.expect(jsonData.nome).to.equal(\"Fulano da Silva\");\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o id do usu√°rio\", function () {\r",
									"    pm.expect(jsonData._id).to.equal(pm.variables.get(\"user_id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o senha do usu√°rio\", function () {\r",
									"    pm.expect(jsonData.password).to.equal(\"teste\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "166cd32a-ebcd-4a39-8143-de9080b6e851",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id}}",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Alterar User",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d1ec28b-4341-41e9-a5d2-aadefd9ad7de",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Valida√ß√£o nome usu√°rio\", function () {",
									"    pm.expect(jsonData.message).to.equal(\"Registro alterado com sucesso\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "f409a743-96ef-42e6-b83e-c4479e411ee2",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"nome\": \"Fulano da Silva dos Santos\",\n  \"email\": \"beltrano@qa21.com.br\",\n  \"password\": \"teste02\",\n  \"administrador\": \"true\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id}}",
						"description": "This is a PUT request and it is used to overwrite an existing piece of data. For instance, after you create an entity with a POST request, you may want to modify that later. You can do that using a PUT request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful PUT request typically returns a `200 OK`, `201 Created`, or `204 No Content` response code."
					},
					"response": []
				},
				{
					"name": "Condulta User Alterado",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6c21cfa-f44a-485c-9598-63fc234543df",
								"exec": [
									"var jsonData = pm.response.json()",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Valida√ß√£o nome usu√°rio alterado\", function () {",
									"    pm.expect(jsonData.nome).to.equal(\"Fulano da Silva dos Santos\");",
									"});",
									"pm.test(\"Valida√ß√£o id do usu√°rio\", function () {",
									"    pm.expect(jsonData._id).to.equal(pm.variables.get(\"user_id\"));",
									"});",
									"",
									"pm.test(\"Valida√ß√£o senha do usu√°rio alterada\", function () {",
									"    pm.expect(jsonData.password).to.equal(\"teste02\");",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "86546d45-04bf-4c59-a042-2eccfd3c2551",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{base_url}}/{{user_id}}",
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				}
			],
			"id": "665117a3-dc3d-4778-8bc1-d05e77f344b6"
		},
		{
			"name": "Produtos",
			"item": [
				{
					"name": "Excluir Produto",
					"id": "23b5fe56-9189-479c-8efa-6b247eedaf77",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{url_produto}}/{{produto_id}}"
					},
					"response": []
				},
				{
					"name": "Cadastrar Produto",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb17a2d-5b9b-4b15-8ba7-14a7f1ed713d",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"produto_id\", jsonResponse._id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o mensagem de Cadastro\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Cadastro realizado com sucesso\")\r",
									"});\r",
									"\r",
									" pm.test(\"Valida√ß√£o registro do produto\", function () {\r",
									"    pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"produto_id\"));\r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "881ae82e-c9c2-46aa-8dd1-9ed3dc581e4e",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJlbHRyYW5vQHFhMTUuY29tLmJyIiwicGFzc3dvcmQiOiJ0ZXN0ZSIsImlhdCI6MTcxMTU0NTM3MSwiZXhwIjoxNzExNTQ1OTcxfQ.ntJPhPgJmpbKwRpf4mCxp4peIuaFS9GYw3v7Dqwhp5w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"nome\": \"Logitech MX Vertical 2\",\r\n  \"preco\": 4701,\r\n  \"descricao\": \"Mouse2\",\r\n  \"quantidade\": 3\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_produto}}"
					},
					"response": []
				},
				{
					"name": "Buscar produto por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c721c3d-9a24-4271-947b-583a2f11e288",
								"exec": [
									"var jsonData = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o nome Produto\", function () {\r",
									"    pm.expect(jsonData.nome).to.equal(\"Logitech MX Vertical\");\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o id do Produto\", function () {\r",
									"    pm.expect(jsonData._id).to.equal(pm.variables.get(\"produto_id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o descricao do Produto\", function () {\r",
									"    pm.expect(jsonData.descricao).to.equal(\"Mouse\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "1f76adf9-c69b-421a-b7a5-c37fb129fac6",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_produto}}/{{produto_id}}"
					},
					"response": []
				},
				{
					"name": "Listar Produtos",
					"id": "76759306-13d2-4e57-983f-c300b6cffb6a",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_produto}}"
					},
					"response": []
				},
				{
					"name": "Editar produto",
					"id": "577858e7-6bda-4346-87dd-ab088ce5bb34",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "PUT",
						"header": [],
						"url": "{{url_produto}}/{{produto_id}}"
					},
					"response": []
				}
			],
			"id": "b63acb9a-b878-4b73-91d3-00d5ee9e0141"
		},
		{
			"name": "Carrinho",
			"item": [
				{
					"name": "Excluir carrinho",
					"id": "861579ef-925a-4dc1-a204-d2cc640601ff",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "DELETE",
						"header": [],
						"url": "{{url_excluircarrinho}}"
					},
					"response": []
				},
				{
					"name": "Cadastrar carrinho",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6eb17a2d-5b9b-4b15-8ba7-14a7f1ed713d",
								"exec": [
									"var jsonResponse = JSON.parse(responseBody)\r",
									"pm.environment.set(\"carrinho_id\", jsonResponse._id);\r",
									"\r",
									"pm.test(\"Status code is 201\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o mensagem de Cadastro\", function () {\r",
									"    pm.expect(jsonResponse.message).to.equal(\"Cadastro realizado com sucesso\")\r",
									"});\r",
									"\r",
									" pm.test(\"Valida√ß√£o registro do produto\", function () {\r",
									"    pm.expect(jsonResponse._id).to.equal(pm.variables.get(\"carrinho_id\"));\r",
									" });"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "ab08298b-c26b-4db3-8124-bc162895cb58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": {
								"token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6ImJlbHRyYW5vQHFhMTUuY29tLmJyIiwicGFzc3dvcmQiOiJ0ZXN0ZSIsImlhdCI6MTcxMTU0NTM3MSwiZXhwIjoxNzExNTQ1OTcxfQ.ntJPhPgJmpbKwRpf4mCxp4peIuaFS9GYw3v7Dqwhp5w"
							}
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"produtos\": [\r\n    {\r\n      \"idProduto\": \"CxqDD0LyoR5ZLF61\",\r\n      \"quantidade\": 1\r\n    }\r\n  ]\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_carrinho}}"
					},
					"response": []
				},
				{
					"name": "Buscar carrinho por ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6c721c3d-9a24-4271-947b-583a2f11e288",
								"exec": [
									"var jsonData = pm.response.json()\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o nome Produto\", function () {\r",
									"    pm.expect(jsonData.nome).to.equal(\"Logitech MX Vertical\");\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o id do Produto\", function () {\r",
									"    pm.expect(jsonData._id).to.equal(pm.variables.get(\"produto_id\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Valida√ß√£o descricao do Produto\", function () {\r",
									"    pm.expect(jsonData.descricao).to.equal(\"Mouse\");\r",
									"});\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"id": "6de68ec5-775c-46ac-bba9-78fd72349e58",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_carrinho}}/5KW2aLFfUotPn9dl"
					},
					"response": []
				},
				{
					"name": "Listar carrinhos",
					"id": "c8ab4b4d-4bba-409f-9717-603aa9ca7153",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": "{{url_carrinho}}"
					},
					"response": []
				}
			],
			"id": "422f1caf-404c-44cc-90d3-7607c897f3b5"
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "315bf25a-2778-43f1-a62d-4e62d71d92d4",
			"key": "id",
			"value": "1"
		},
		{
			"id": "ecfe1aee-5d14-444d-9176-182a19d022ee",
			"key": "base_url",
			"value": "https://postman-rest-api-learner.glitch.me/"
		}
	]
}